def do_rotate(color, d):
    # 해당 color 배열을 시계 또는 반시계 방향으로 회전
    tmp = [[0] * 3 for _ in range(3)]
    if d == '-':
        for i in range(3):
            for j in range(3):
                tmp[2-j][i] = color[i][j]
        return tmp
    
    for i in range(3):
        for j in range(3):
            tmp[j][2-i] = color[i][j]
    return tmp
    
def do(ch, d):
    global w, y, r, o, g, b

    if ch == 'U':
        o1, o2, o3, b1, b2, b3 = o[0][0], o[0][1], o[0][2], b[0][0], b[0][1], b[0][2]
        r1, r2, r3, g1, g2, g3 = r[0][0], r[0][1], r[0][2], g[0][0], g[0][1], g[0][2]
        if d == '+':
            b[0][0], b[0][1], b[0][2] = o1, o2, o3
            r[0][0], r[0][1], r[0][2] = b1, b2, b3
            g[0][0], g[0][1], g[0][2] = r1, r2, r3
            o[0][0], o[0][1], o[0][2] = g1, g2, g3
        else:
            b[0][0], b[0][1], b[0][2] = r1, r2, r3
            r[0][0], r[0][1], r[0][2] = g1, g2, g3
            g[0][0], g[0][1], g[0][2] = o1, o2, o3
            o[0][0], o[0][1], o[0][2] = b1, b2, b3
        w = do_rotate(w, d)

    elif ch == 'D':
        o1, o2, o3, b1, b2, b3 = o[2][0], o[2][1], o[2][2], b[2][0], b[2][1], b[2][2]
        r1, r2, r3, g1, g2, g3 = r[2][0], r[2][1], r[2][2], g[2][0], g[2][1], g[2][2]
        if d == '+':
            b[2][0], b[2][1], b[2][2] = r1, r2, r3
            r[2][0], r[2][1], r[2][2] = g1, g2, g3
            g[2][0], g[2][1], g[2][2] = o1, o2, o3
            o[2][0], o[2][1], o[2][2] = b1, b2, b3
        else:
            b[2][0], b[2][1], b[2][2] = o1, o2, o3
            r[2][0], r[2][1], r[2][2] = b1, b2, b3
            g[2][0], g[2][1], g[2][2] = r1, r2, r3
            o[2][0], o[2][1], o[2][2] = g1, g2, g3
        y = do_rotate(y, d)

    elif ch == 'F':
        w1, w2, w3, g1, g2, g3 = w[2][0], w[2][1], w[2][2], g[0][2], g[1][2], g[2][2]
        y1, y2, y3, b1, b2, b3 = y[0][0], y[0][1], y[0][2], b[0][0], b[1][0], b[2][0]
        if d == '+':
            b[0][0], b[1][0], b[2][0] = w1, w2, w3
            y[0][0], y[0][1], y[0][2] = b3, b2, b1 
            g[0][2], g[1][2], g[2][2] = y1, y2, y3
            w[2][0], w[2][1], w[2][2] = g3, g2, g1
        else:
            g[0][2], g[1][2], g[2][2] = w3, w2, w1
            y[0][0], y[0][1], y[0][2] = g1, g2, g3
            b[0][0], b[1][0], b[2][0] = y3, y2, y1
            w[2][0], w[2][1], w[2][2] = b1, b2, b3
        r = do_rotate(r, d)

    elif ch == 'B':
        w1, w2, w3, g1, g2, g3 = w[0][0], w[0][1], w[0][2], g[0][0], g[1][0], g[2][0]
        y1, y2, y3, b1, b2, b3 = y[2][0], y[2][1], y[2][2], b[0][2], b[1][2], b[2][2]
        if d == '+':
            g[0][0], g[1][0], g[2][0] = w3, w2, w1
            y[2][0], y[2][1], y[2][2] = g1, g2, g3
            b[0][2], b[1][2], b[2][2] = y3, y2, y1
            w[0][0], w[0][1], w[0][2] = b1, b2, b3
        else:
            b[0][2], b[1][2], b[2][2] = w1, w2, w3
            y[2][0], y[2][1], y[2][2] = b3, b2, b1 
            g[0][0], g[1][0], g[2][0] = y1, y2, y3
            w[0][0], w[0][1], w[0][2] = g3, g2, g1
        o = do_rotate(o, d)

    elif ch == 'L':
        r1, r2, r3, y1, y2, y3 = r[0][0], r[1][0], r[2][0], y[0][0], y[1][0], y[2][0]
        o1, o2, o3, w1, w2, w3 = o[0][2], o[1][2], o[2][2], w[0][0], w[1][0], w[2][0]
        if d == '+':
            r[0][0], r[1][0], r[2][0] = w1, w2, w3
            y[0][0], y[1][0], y[2][0] = r1, r2, r3
            o[0][2], o[1][2], o[2][2] = y3, y2, y1
            w[0][0], w[1][0], w[2][0] = o3, o2, o1
        else:
            w[0][0], w[1][0], w[2][0] = r1, r2, r3
            o[0][2], o[1][2], o[2][2] = w3, w2, w1
            y[0][0], y[1][0], y[2][0] = o3, o2, o1
            r[0][0], r[1][0], r[2][0] = y1, y2, y3
        g = do_rotate(g, d)

    elif ch == 'R':
        r1, r2, r3, y1, y2, y3 = r[0][2], r[1][2], r[2][2], y[0][2], y[1][2], y[2][2]
        o1, o2, o3, w1, w2, w3 = o[0][0], o[1][0], o[2][0], w[0][2], w[1][2], w[2][2]
        if d == '+':
            w[0][2], w[1][2], w[2][2] = r1, r2, r3
            o[0][0], o[1][0], o[2][0] = w3, w2, w1
            y[0][2], y[1][2], y[2][2] = o3, o2, o1
            r[0][2], r[1][2], r[2][2] = y1, y2, y3
        else:
            r[0][2], r[1][2], r[2][2] = w1, w2, w3
            y[0][2], y[1][2], y[2][2] = r1, r2, r3
            o[0][0], o[1][0], o[2][0] = y3, y2, y1
            w[0][2], w[1][2], w[2][2] = o3, o2, o1
        b = do_rotate(b, d)

for _ in range(int(input())):    
    N = int(input())
    cmd_list = list(input().split(' '))

    w = [['w'] * 3 for _ in range(3)]
    y = [['y'] * 3 for _ in range(3)]
    r = [['r'] * 3 for _ in range(3)]
    o = [['o'] * 3 for _ in range(3)]
    g = [['g'] * 3 for _ in range(3)]
    b = [['b'] * 3 for _ in range(3)]

    for cmd in cmd_list:
        do(cmd[0], cmd[1])

    for row in w:
        print(''.join(row))